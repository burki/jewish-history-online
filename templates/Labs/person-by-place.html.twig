{% extends '@TeiEdition/Default/base.html.twig' %}

{% import '@TeiEdition/Shared/map-leaflet.html.twig' as map %}
{% block head %}
    {{ map.head() }}
    {{ map.head_markercluster() }}

    <script src="{{ app.request.basepath }}/vendor/leaflet.minichart-0.2.5/leaflet.minichart.min.js"></script>
{% endblock %}

{% block body %}
    {% if pageTitle is not empty %}<h1>{{ pageTitle }}</h1>{% endif %}

    <div id="map-container">
        <div id="map" style="width: 100%; min-height: 80vh"></div>
    </div>

    <script type="text/javascript">
        {{ map.showMap(bounds, markers) }}
        showMap();

        var markers = L.markerClusterGroup({
            iconCreateFunction: function (cluster) {
                // var childCount = cluster.getChildCount();
                var markers = cluster.getAllChildMarkers();
                var n = 0;
                for (var i = 0; i < markers.length; i++) {
                    n += markers[i].number;
                }
                var childCount = n;
                var c = ' marker-cluster-';
                if (childCount < 10) {
                    c += 'small';
                } else if (childCount < 100) {
                    c += 'medium';
                } else {
                    c += 'large';
                }

                return new L.DivIcon({ html: '<div><span>' + childCount + '</span></div>', className: 'marker-cluster' + c, iconSize: new L.Point(40, 40) });
            },
            spiderfyOnMaxZoom: false, // showCoverageOnHover: false, zoomToBoundsOnClick: false,
            disableClusteringAtZoom: 4
        });

        var addressPoints = {{ data|raw }};
        for (var i = 0; i < addressPoints.length; i++) {
            var a = addressPoints[i];
            var title = a[2];
            if (true) {
                // pie
                var count = a[4] + (a.length > 5 ? a[5] : 0);
                var radius = 6;
                if (count > 0) {
                    radius += Math.round(1.5 * Math.log2(count > 256 ? 256 : count));
                }
                var markerProperties = {
                    colors: [ '#b286ef', '#000' ],
                    width: 2 * radius,
                    height: 2 * radius,
                    type: 'pie',
                    data: [ a[4], (a.length > 5 ? a[5] : 0) ]
                };
                var marker = L.minichart(L.latLng(a[0], a[1]), markerProperties);
                marker.number = count;

                marker.bindTooltip(title + ' (' + a[4] + '/' + ((a.length > 5 ? a[5] : 0)) + ')',
                    { className: 'my-tooltip'});
                marker.bindPopup('<strong>' + title + '</strong><br />' + a[3]);
            }
            else {
                var marker = L.marker(L.latLng(a[0], a[1]),
                                      { title: title });
                marker.number = a[4];
                marker.bindPopup('<strong>' + title + '</strong><br />' + a[3]);
            }

            markers.addLayer(marker);
        }

        map.addLayer(markers);
    </script>
{% endblock %}
